// <auto-generated />
using System;
using Credit.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Credit.Migrations
{
    [DbContext(typeof(creditContext))]
    partial class creditContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Credit.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UQ_login")
                        .IsUnique();

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Credit.Models.DebtPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Paid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float")
                        .HasColumnName("payment_amount");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "UQ_Table_1")
                        .IsUnique();

                    b.ToTable("debt_payment");
                });

            modelBuilder.Entity("Credit.Models.SubmittedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfApplicationSubmission")
                        .HasColumnType("date")
                        .HasColumnName("date_of_application_submission");

                    b.Property<double>("LoanSize")
                        .HasColumnType("float")
                        .HasColumnName("loan_size");

                    b.Property<int>("NumberOfPayments")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status");

                    b.Property<int>("TypeOfLoanId")
                        .HasColumnType("int")
                        .HasColumnName("type_of_loan_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfLoanId");

                    b.HasIndex("UserId");

                    b.ToTable("submitted_applications");
                });

            modelBuilder.Entity("Credit.Models.TypeOfLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Percent")
                        .HasColumnType("float")
                        .HasColumnName("percent");

                    b.Property<string>("TypeOfLoanRate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_of_loan_rate");

                    b.HasKey("Id");

                    b.ToTable("type_of_loan");
                });

            modelBuilder.Entity("Credit.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("ProbabilityOfInsolvency")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("probability_of_insolvency");

                    b.Property<string>("TypeOfUser")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("type_of_user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UQ_client")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Credit.Models.Account", b =>
                {
                    b.HasOne("Credit.Models.User", "IdNavigation")
                        .WithOne("Account")
                        .HasForeignKey("Credit.Models.Account", "Id")
                        .HasConstraintName("FK_accounts_users")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Credit.Models.DebtPayment", b =>
                {
                    b.HasOne("Credit.Models.User", "User")
                        .WithMany("DebtPayments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_debt_payment_users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Credit.Models.SubmittedApplication", b =>
                {
                    b.HasOne("Credit.Models.TypeOfLoan", "TypeOfLoan")
                        .WithMany("SubmittedApplications")
                        .HasForeignKey("TypeOfLoanId")
                        .HasConstraintName("FK_submitted_applications_type_of_loan")
                        .IsRequired();

                    b.HasOne("Credit.Models.User", "User")
                        .WithMany("SubmittedApplications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_submitted_applications_users")
                        .IsRequired();

                    b.Navigation("TypeOfLoan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Credit.Models.TypeOfLoan", b =>
                {
                    b.Navigation("SubmittedApplications");
                });

            modelBuilder.Entity("Credit.Models.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("DebtPayments");

                    b.Navigation("SubmittedApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
